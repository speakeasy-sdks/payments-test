/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PaymentAuth } from "./paymentauth";
import { PaymentCapture } from "./paymentcapture";
import { PaymentRefund } from "./paymentrefund";
import { Expose, Type } from "class-transformer";

/**
 * Codifies the point in the payment processing request flow from merchant. A payment request consist of authorization, captures and refunds.  Valid Values are : PENDING, OPEN, CLOSED, CANCELLED
 */
export enum PaymentRequestStatus {
    Pending = "PENDING",
    Open = "OPEN",
    Closed = "CLOSED",
    Cancelled = "CANCELLED",
}

/**
 * Payment request information for multi capture order
 */
export class PaymentRequest extends SpeakeasyBase {
    /**
     * List of payment authorization information
     */
    @SpeakeasyMetadata({ elemType: PaymentAuth })
    @Expose({ name: "authorizations" })
    @Type(() => PaymentAuth)
    authorizations?: PaymentAuth[];

    /**
     * List of payment capture information
     */
    @SpeakeasyMetadata({ elemType: PaymentCapture })
    @Expose({ name: "captures" })
    @Type(() => PaymentCapture)
    captures?: PaymentCapture[];

    /**
     * Identifies a unique occurrence of an payment processing request from merchant that is associated with a purchase of goods and/or services. A payment request consist of authorization, captures and refunds.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "paymentRequestId" })
    paymentRequestId?: string;

    /**
     * Codifies the point in the payment processing request flow from merchant. A payment request consist of authorization, captures and refunds.  Valid Values are : PENDING, OPEN, CLOSED, CANCELLED
     */
    @SpeakeasyMetadata()
    @Expose({ name: "paymentRequestStatus" })
    paymentRequestStatus?: PaymentRequestStatus;

    /**
     * List of payment refund information
     */
    @SpeakeasyMetadata({ elemType: PaymentRefund })
    @Expose({ name: "refunds" })
    @Type(() => PaymentRefund)
    refunds?: PaymentRefund[];
}
