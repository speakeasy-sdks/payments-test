/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AuthenticationValueResponse } from "./authenticationvalueresponse";
import { ThreeDS, ThreeDSOutput } from "./threeds";
import { TokenAuthenticationResult } from "./tokenauthenticationresult";
import { Expose, Type } from "class-transformer";

/**
 * Codifies the justification why a transaction does not have to meet Strong Customer Authentication (SCA) requirements. SCA is a regulatory requirement to reduce fraud and make online payments more secure via two-factor authentication; an authentication based on the use of two or more elements categorized as knowledge (something only the user knows), possession (something only the user possesses) or inherence (something the user is).
 */
export enum AuthenticationSCAExemptionReason {
    TrustedMerchant = "TRUSTED_MERCHANT",
    SecureCorporatePayment = "SECURE_CORPORATE_PAYMENT",
    TransactionRiskAnalysis = "TRANSACTION_RISK_ANALYSIS",
    LowValuePayment = "LOW_VALUE_PAYMENT",
    MerchantInitiatedTransaction = "MERCHANT_INITIATED_TRANSACTION",
    RecurringPayment = "RECURRING_PAYMENT",
    ScaDelegation = "SCA_DELEGATION",
}

/**
 * The authentication object allows you to opt in to additional security features like 3-D Secure
 */
export class AuthenticationInput extends SpeakeasyBase {
    /**
     * Codifies the justification why a transaction does not have to meet Strong Customer Authentication (SCA) requirements. SCA is a regulatory requirement to reduce fraud and make online payments more secure via two-factor authentication; an authentication based on the use of two or more elements categorized as knowledge (something only the user knows), possession (something only the user possesses) or inherence (something the user is).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "SCAExemptionReason" })
    scaExemptionReason?: AuthenticationSCAExemptionReason;

    /**
     * Describes the Electronic Commerce Indicator used in cardholder authentication on a network token
     */
    @SpeakeasyMetadata()
    @Expose({ name: "electronicCommerceIndicator" })
    electronicCommerceIndicator?: string;

    /**
     * Contains information about payer authentication using 3-D Secure authentication
     */
    @SpeakeasyMetadata()
    @Expose({ name: "threeDS" })
    @Type(() => ThreeDS)
    threeDS?: ThreeDS;

    /**
     * Contains authentication value received from Payment Networks for network token transactions
     */
    @SpeakeasyMetadata()
    @Expose({ name: "tokenAuthenticationValue" })
    tokenAuthenticationValue?: string;
}

/**
 * The authentication object allows you to opt in to additional security features like 3-D Secure
 */
export class AuthenticationOutput extends SpeakeasyBase {
    /**
     * Codifies the justification why a transaction does not have to meet Strong Customer Authentication (SCA) requirements. SCA is a regulatory requirement to reduce fraud and make online payments more secure via two-factor authentication; an authentication based on the use of two or more elements categorized as knowledge (something only the user knows), possession (something only the user possesses) or inherence (something the user is).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "SCAExemptionReason" })
    scaExemptionReason?: AuthenticationSCAExemptionReason;

    /**
     * Returned when more information about authentication is received from the  network
     */
    @SpeakeasyMetadata()
    @Expose({ name: "authenticationValueResponse" })
    @Type(() => AuthenticationValueResponse)
    authenticationValueResponse?: AuthenticationValueResponse;

    /**
     * Describes the Electronic Commerce Indicator used in cardholder authentication on a network token
     */
    @SpeakeasyMetadata()
    @Expose({ name: "electronicCommerceIndicator" })
    electronicCommerceIndicator?: string;

    /**
     * Contains information about payer authentication using 3-D Secure authentication
     */
    @SpeakeasyMetadata()
    @Expose({ name: "threeDS" })
    @Type(() => ThreeDSOutput)
    threeDS?: ThreeDSOutput;

    /**
     * Returned when more information about token authentication is received from the network
     */
    @SpeakeasyMetadata()
    @Expose({ name: "tokenAuthenticationResult" })
    @Type(() => TokenAuthenticationResult)
    tokenAuthenticationResult?: TokenAuthenticationResult;
}
