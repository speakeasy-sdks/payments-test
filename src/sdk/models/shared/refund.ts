/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccountHolder } from "./accountholder";
import { AccountOnFile } from "./accountonfile";
import { Currency } from "./currency";
import { InitiatorType } from "./initiatortype";
import { MerchantInput } from "./merchant";
import { RefundPaymentMethodTypeInput } from "./refundpaymentmethodtype";
import { RetailAddenda } from "./retailaddenda";
import { Expose, Type } from "class-transformer";

/**
 * Input information for refund API calls
 */
export class RefundInput extends SpeakeasyBase {
    /**
     * Card owner properties
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accountHolder" })
    @Type(() => AccountHolder)
    accountHolder?: AccountHolder;

    /**
     * The label given to indicate if the account number is stored, not stored, or is going to be stored by a merchant. Valid values: STORED NOT_STORED TO_BE_STORED
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accountOnFile" })
    accountOnFile?: AccountOnFile;

    /**
     * Specifies the monetary value of the transaction performed.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount?: number;

    /**
     * Describes the currency type of the transaction
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currency" })
    currency?: Currency;

    /**
     * Describes the initiator of the transaction for the stored credential framework (MIT/CIT)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "initiatorType" })
    initiatorType?: InitiatorType;

    /**
     * Information about the merchant
     */
    @SpeakeasyMetadata()
    @Expose({ name: "merchant" })
    @Type(() => MerchantInput)
    merchant: MerchantInput;

    /**
     * A unique merchant assigned identifier for the confirmation of goods and/or services purchased. The merchant order provides the merchant a reference to the prices, quantity and description of goods and/or services to be delivered for all transactions included in the sale.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "merchantOrderNumber" })
    merchantOrderNumber?: string;

    /**
     * Object with one of the payment method type applicable for refund processing
     */
    @SpeakeasyMetadata()
    @Expose({ name: "paymentMethodType" })
    @Type(() => RefundPaymentMethodTypeInput)
    paymentMethodType?: RefundPaymentMethodTypeInput;

    /**
     * Retail inductry specific attributes.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "retailAddenda" })
    @Type(() => RetailAddenda)
    retailAddenda?: RetailAddenda;

    /**
     * Provides textual information about charges or payments on statements. Using clear and accurate statement descriptors can reduce chargebacks and disputes.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "statementDescriptor" })
    statementDescriptor?: string;
}
