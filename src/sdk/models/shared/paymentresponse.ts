/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccountHolderOutput } from "./accountholder";
import { AccountOnFile } from "./accountonfile";
import { CaptureMethod } from "./capturemethod";
import { Currency } from "./currency";
import { Information } from "./information";
import { InitiatorType } from "./initiatortype";
import { Installment } from "./installment";
import { MerchantOutput } from "./merchant";
import { MultiCapture } from "./multicapture";
import { PartialAuthorizationSupport } from "./partialauthorizationsupport";
import { PaymentMethodTypeOutput } from "./paymentmethodtype";
import { PaymentRequest } from "./paymentrequest";
import { Recurring } from "./recurring";
import { ResponseStatus } from "./responsestatus";
import { RetailAddenda } from "./retailaddenda";
import { Risk } from "./risk";
import { ShipToOutput } from "./shipto";
import { SourceAccountInformationOutput } from "./sourceaccountinformation";
import { TransactionRoutingOverrideList } from "./transactionroutingoverridelist";
import { TransactionState } from "./transactionstate";
import { Expose, Type } from "class-transformer";

/**
 * Response information for payment API calls
 */
export class PaymentResponseOutput extends SpeakeasyBase {
    /**
     * Card owner properties
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accountHolder" })
    @Type(() => AccountHolderOutput)
    accountHolder?: AccountHolderOutput;

    /**
     * The label given to indicate if the account number is stored, not stored, or is going to be stored by a merchant. Valid values: STORED NOT_STORED TO_BE_STORED
     */
    @SpeakeasyMetadata()
    @Expose({ name: "accountOnFile" })
    accountOnFile?: AccountOnFile;

    /**
     * Specifies the monetary value of the transaction performed.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount?: number;

    /**
     * Approval code provided by the payment issuer
     */
    @SpeakeasyMetadata()
    @Expose({ name: "approvalCode" })
    approvalCode?: string;

    /**
     * Specifies the monetary value of the sum requested to validate and ensure there are enough funds required to make a purchase. The amount is usually identical to the cost of the goods or services charged for a single transaction. It can be a smaller amount in cases where a transaction is split into multiple payments. It can also be a small amount or estimated amount to ensure the payment method is valid and has sufficient funds available when the final transaction amount is not known at authorization. In the case of a reversal, this represents the sum originally requested. In this context, this is the balanced authorized amount left on the card.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "balanceAuthorizationAmount" })
    balanceAuthorizationAmount?: number;

    /**
     * To capture via separate API call, send captureMethod= ?Manual.? For immediate capture, send captureMethod= ?Now.? For automated delayed capture based on merchant profile setting (default is 120 minutes), send captureMethod= ?Delayed.?
     */
    @SpeakeasyMetadata()
    @Expose({ name: "captureMethod" })
    captureMethod?: CaptureMethod;

    /**
     * Designates the hour (hh), minute (mm), seconds (ss) and date (if timestamp) or year (YYYY), month (MM), and day (DD) (if date) when the authorization is complete and the transaction is ready for settlement. The transaction can no longer be edited but can be voided.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "captureTime" })
    captureTime?: string;

    /**
     * Describes the currency type of the transaction
     */
    @SpeakeasyMetadata()
    @Expose({ name: "currency" })
    currency?: Currency;

    /**
     * The identifier that payment method returns after the order placed in their system.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "externalOrderReferenceNumber" })
    externalOrderReferenceNumber?: string;

    /**
     * Message received from Issuer, network or processor. Can be blank
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hostMessage" })
    hostMessage?: string;

    /**
     * Identifies unique identifier generated by the acquirer processing system and return to merchant for reference purposes.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hostReferenceId" })
    hostReferenceId?: string;

    /**
     * A list of informational messages
     */
    @SpeakeasyMetadata()
    @Expose({ name: "information" })
    @Type(() => Information)
    information?: Information;

    /**
     * Describes the initiator of the transaction for the stored credential framework (MIT/CIT)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "initiatorType" })
    initiatorType?: InitiatorType;

    /**
     * Object containing information in the file
     */
    @SpeakeasyMetadata()
    @Expose({ name: "installment" })
    @Type(() => Installment)
    installment?: Installment;

    /**
     * Indicates if the amount is final and will not change
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isAmountFinal" })
    isAmountFinal?: boolean;

    /**
     * (Deprecated) For auth only, send isCapture=false. For sale or update an authorized payment to capture, send isCapture=true.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isCapture" })
    isCapture?: boolean;

    /**
     * Void a payment
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isVoid" })
    isVoid?: boolean;

    /**
     * Information about the merchant
     */
    @SpeakeasyMetadata()
    @Expose({ name: "merchant" })
    @Type(() => MerchantOutput)
    merchant?: MerchantOutput;

    /**
     * A unique merchant assigned identifier for the confirmation of goods and/or services purchased. The merchant order provides the merchant a reference to the prices, quantity and description of goods and/or services to be delivered for all transactions included in the sale.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "merchantOrderNumber" })
    merchantOrderNumber?: string;

    /**
     * Split Shipment Information
     */
    @SpeakeasyMetadata()
    @Expose({ name: "multiCapture" })
    @Type(() => MultiCapture)
    multiCapture?: MultiCapture;

    /**
     * Identifies a unique occurrence of a transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "originalTransactionId" })
    originalTransactionId?: string;

    /**
     * Indicates that the issuer has provided the merchant an authorization for a portion of the amount requested. This service provides an alternative to receiving a decline when the available card balance is not sufficient to approve a transaction in full.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "partialAuthorization" })
    partialAuthorization?: boolean;

    /**
     * Indicates that the issuer has provided the merchant an authorization for a portion of the amount requested. This service provides an alternative to receiving a decline when the available card balance is not sufficient to approve a transaction in full.In this context, this indicate if merchant support parial authorization.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "partialAuthorizationSupport" })
    partialAuthorizationSupport?: PartialAuthorizationSupport;

    /**
     * paymentType
     */
    @SpeakeasyMetadata()
    @Expose({ name: "paymentMethodType" })
    @Type(() => PaymentMethodTypeOutput)
    paymentMethodType: PaymentMethodTypeOutput;

    /**
     * Payment request information for multi capture order
     */
    @SpeakeasyMetadata()
    @Expose({ name: "paymentRequest" })
    @Type(() => PaymentRequest)
    paymentRequest?: PaymentRequest;

    /**
     * Recurring Payment Object
     */
    @SpeakeasyMetadata()
    @Expose({ name: "recurring" })
    @Type(() => Recurring)
    recurring?: Recurring;

    /**
     * Monetary value of uncaptured, approved authorizations currently being held against the card for this transaction by a given Merchant.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remainingAuthAmount" })
    remainingAuthAmount?: number;

    /**
     * This is the amount of the transaction that is currently available for refunds.  It takes into account the original transaction amount as well as any previous refunds that were applied to the transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "remainingRefundableAmount" })
    remainingRefundableAmount?: number;

    /**
     * Merchant identifier for the request. The value must be unique.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "requestId" })
    requestId: string;

    /**
     * Short explanation for response status
     */
    @SpeakeasyMetadata()
    @Expose({ name: "responseCode" })
    responseCode: string;

    /**
     * Long explanation of response code
     */
    @SpeakeasyMetadata()
    @Expose({ name: "responseMessage" })
    responseMessage: string;

    /**
     * The label given to the state of a response to a request submitted by a consumer through the Firm's Application Program Interface (API) that matches a test case. Valid Values: ERROR,SUCCESS, DENIED
     */
    @SpeakeasyMetadata()
    @Expose({ name: "responseStatus" })
    responseStatus: ResponseStatus;

    /**
     * Retail inductry specific attributes.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "retailAddenda" })
    @Type(() => RetailAddenda)
    retailAddenda?: RetailAddenda;

    /**
     * Response information for transactions
     */
    @SpeakeasyMetadata()
    @Expose({ name: "risk" })
    @Type(() => Risk)
    risk?: Risk;

    /**
     * Object containing information about the recipients
     */
    @SpeakeasyMetadata()
    @Expose({ name: "shipTo" })
    @Type(() => ShipToOutput)
    shipTo?: ShipToOutput;

    /**
     * Source Account Information
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sourceAccountInformation" })
    @Type(() => SourceAccountInformationOutput)
    sourceAccountInformation?: SourceAccountInformationOutput;

    /**
     * Provides textual information about charges or payments on statements. Using clear and accurate statement descriptors can reduce chargebacks and disputes.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "statementDescriptor" })
    statementDescriptor?: string;

    /**
     * Specifies the monetary value of authorizations currently being held against the Card.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "totalAuthorizedAmount" })
    totalAuthorizedAmount?: number;

    /**
     * Designates the hour, minute, seconds and date (if timestamp) or year, month, and date (if date) when the transaction (monetary or non-monetary) occurred.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transactionDate" })
    transactionDate?: string;

    /**
     * Identifier of a resource
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transactionId" })
    transactionId: string;

    /**
     * Codifies specific system a client's program operates on within the Firm and through which cardholder transactions are submitted and processed
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transactionProcessor" })
    transactionProcessor?: string;

    /**
     * List of transaction routing providers where the transaction be routed preferred by the merchant .
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transactionRoutingOverrideList" })
    transactionRoutingOverrideList?: TransactionRoutingOverrideList[];

    /**
     * Codifies the current state a transaction may be in. The transaction can only be in one state at a time. The state is based on the current phase a transaction could be in. For example, a transaction that has been received but not captured would be in the A
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transactionState" })
    transactionState: TransactionState;
}
