/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Codifies the type of transaction approval sought by a merchant such as a pre-authorization, final authorization, or undetermined.
 */
export enum PaymentAuthAuthorizationType {
    Initial = "INITIAL",
    Reauth = "REAUTH",
    Incremental = "INCREMENTAL",
}

/**
 * Authorization request information for multi capture order
 */
export class PaymentAuth extends SpeakeasyBase {
    /**
     * Specifies the monetary value of the transaction performed.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount?: number;

    /**
     * Identifies a unique occurrence of an authorization that is associated with a purchase of goods and/or services. More than one authorization can exist for a purchase, as an example in fuel and hotel services a merchant can send multiple authorization requests when the exact amount is unknown until completion of the sale.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "authorizationId" })
    authorizationId?: string;

    /**
     * Codifies the type of transaction approval sought by a merchant such as a pre-authorization, final authorization, or undetermined.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "authorizationType" })
    authorizationType?: PaymentAuthAuthorizationType;

    /**
     * Codifies the point in the payment transaction flow of the transaction. For example, a typical transaction is authorized then captured for clearing and settlement; closed is when the transaction is ready for clearing and completed when the transaction is sent to the payment network for clearing.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transactionStatusCode" })
    transactionStatusCode?: string;
}
