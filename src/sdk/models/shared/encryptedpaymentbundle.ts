/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EncryptedPaymentHeader } from "./encryptedpaymentheader";
import { Expose, Type } from "class-transformer";

/**
 * Encrypted Data from ApplePay or GooglePay
 */
export class EncryptedPaymentBundle extends SpeakeasyBase {
    /**
     * The message body of a transmitted message containing the actual data for a specific purpose. This is the essential data that is being carried within a packet or other transmitted unit.  In this context, the message details have been rendered unreadable by general means through the application of a given set of instructions and a key.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "encryptedPayload" })
    encryptedPayload?: string;

    /**
     * header information for Encrypted Data from ApplePay or GooglePay
     */
    @SpeakeasyMetadata()
    @Expose({ name: "encryptedPaymentHeader" })
    @Type(() => EncryptedPaymentHeader)
    encryptedPaymentHeader?: EncryptedPaymentHeader;

    /**
     * Identifies a unique variation of an application based on developments or updates to an existing model for the software (a.k.a. Versioning). Version assignments typically include a major and minor category, assigned in an increasing order aligned with the software release dates.  In this context, this is the version number of Elliptic Curve Cryptography (ECC) which is akey-based technique for encrypting data. ECC focuses on pairs of public and private keys for decryption and encryption of web traffic.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "protocolVersion" })
    protocolVersion?: string;

    /**
     * This is the virtual signature data of the payment and header data. The signature information let the receiver know that the data is indeed sent by the sender. The signature is created using sender's key pair.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "signature" })
    signature?: string;
}
