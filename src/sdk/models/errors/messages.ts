/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { Information } from "./information";
import { ValidationMessage } from "./validationmessage";
import { classToPlain, Expose, Type } from "class-transformer";

/**
 * A list of errors and warnings.
 */
export class Messages extends Error {
    /**
     * A list of informational messages
     */
    @SpeakeasyMetadata()
    @Expose({ name: "information" })
    @Type(() => Information)
    information?: Information;

    /**
     * Short explanation for response status
     */
    @SpeakeasyMetadata()
    @Expose({ name: "responseCode" })
    responseCode: string;

    /**
     * Long explanation of response code
     */
    @SpeakeasyMetadata()
    @Expose({ name: "responseMessage" })
    responseMessage?: string;

    /**
     * The label given to the state of a response to a request submitted by a consumer through the Firm's Application Program Interface (API) that matches a test case. Valid Values: ERROR,SUCCESS, DENIED
     */
    @SpeakeasyMetadata()
    @Expose({ name: "responseStatus" })
    responseStatus: shared.ResponseStatus;

    /**
     * Information about errors occurred in transaction validation
     */
    @SpeakeasyMetadata({ elemType: ValidationMessage })
    @Expose({ name: "validationErrors" })
    @Type(() => ValidationMessage)
    validationErrors?: ValidationMessage[];

    constructor(err?: Messages) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "Messages";
        Object.setPrototypeOf(this, Messages.prototype);
    }
}
